#include <iostream>
#include <cmath>

class GurneyFlap {
private:
    double flapLength; // Length of the gurney flap (m)
    double flapHeight; // Height of the gurney flap (m)
    double airDensity; // Air density (kg/m^3)
    double airSpeed;   // Air speed (m/s)

public:
    // Constructor
    GurneyFlap(double length, double height, double density, double speed)
        : flapLength(length), flapHeight(height), airDensity(density), airSpeed(speed) {}

    // Calculate the lift force generated by the gurney flap
    double calculateLiftForce() {
        // Coefficient of lift for a rectangular plate (approximation)
        const double Cl = 2.0 * M_PI * flapHeight / flapLength;

        // Lift force (N)
        double liftForce = 0.5 * airDensity * pow(airSpeed, 2) * flapLength * flapHeight * Cl;
        return liftForce;
    }

    // Calculate the drag force generated by the gurney flap
    double calculateDragForce() {
        // Coefficient of drag for a rectangular plate (approximation)
        const double Cd = 1.28; // Approximate value for a flat plate

        // Drag force (N)
        double dragForce = 0.5 * airDensity * pow(airSpeed, 2) * flapLength * flapHeight * Cd;
        return dragForce;
    }
};

int main() {
    // Define gurney flap and flow conditions
    double flapLength = 0.1;  // 10 cm
    double flapHeight = 0.02; // 2 cm
    double airDensity = 1.2;  // Air density at standard conditions (kg/m^3)
    double airSpeed = 20.0;   // Air speed (m/s)

    // Create a gurney flap object
    GurneyFlap gurneyFlap(flapLength, flapHeight, airDensity, airSpeed);

    // Calculate and display the lift and drag forces
    double liftForce = gurneyFlap.calculateLiftForce();
    double dragForce = gurneyFlap.calculateDragForce();

    std::cout << "Gurney Flap Lift Force: " << liftForce << " N\n";
    std::cout << "Gurney Flap Drag Force: " << dragForce << " N\n";

    return 0;
}
